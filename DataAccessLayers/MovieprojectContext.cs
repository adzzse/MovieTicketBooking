﻿// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayers
{
    public class MovieprojectContext : DbContext
    {
        public MovieprojectContext(DbContextOptions<MovieprojectContext> options) : base(options)
        {
        }

        public DbSet<Account> Accounts { get; set; }
        public DbSet<Bill> Bills { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CinemaRoom> CinemaRooms { get; set; }
        public DbSet<Movie> Movies { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Seat> Seats { get; set; }
        public DbSet<ShowTime> ShowTimes { get; set; }
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionHistory> TransactionHistories { get; set; }
        public DbSet<TransactionType> TransactionTypes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Account_Role");
            });

            modelBuilder.Entity<Bill>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Bills)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Bill_Account");

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.Bills)
                    .HasForeignKey(d => d.TicketId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Bill_Ticket");
            });

            modelBuilder.Entity<Movie>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Movies)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Movie_Category");
            });

            modelBuilder.Entity<Seat>(entity =>
            {
                entity.HasOne(d => d.CinemaRoom)
                    .WithMany(p => p.Seats)
                    .HasForeignKey(d => d.CinemaRoomId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("FK_Seat_CinemaRoom");
            });

            modelBuilder.Entity<ShowTime>(entity =>
            {
                entity.HasOne(d => d.CinemaRoom)
                    .WithMany(p => p.ShowTimes)
                    .HasForeignKey(d => d.CinemaRoomId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("FK_ShowTime_CinemaRoom");

                entity.HasOne(d => d.Movie)
                    .WithMany(p => p.ShowTimes)
                    .HasForeignKey(d => d.MovieId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("FK_ShowTime_Movie");
            });

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.HasOne(d => d.Movie)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.MovieId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Ticket_Movie");

                entity.HasOne(d => d.Seat)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.SeatId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("FK_Ticket_Seat");

                entity.HasOne(d => d.Showtime)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.ShowtimeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("FK_Ticket_ShowTime");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasOne(d => d.Bill)
                    .WithOne(p => p.Transaction)
                    .HasForeignKey<Transaction>(d => d.BillId)
                    .HasConstraintName("FK_Transaction_Bill");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Transaction_TransactionType");
            });

            modelBuilder.Entity<TransactionHistory>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_TransactionHistory_Account");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_TransactionHistory_Transaction");

                entity.Property(e => e.Time)
                    .HasDefaultValueSql("GETDATE()");
            });
        }
    }
}